{
	"name": "vmpl",
	"properties": {
		"activities": [
			{
				"name": "Copy dataVM",
				"type": "Copy",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "BinarySource",
						"storeSettings": {
							"type": "FileServerReadSettings",
							"recursive": true,
							"wildcardFileName": "*.*",
							"deleteFilesAfterCompletion": false
						},
						"formatSettings": {
							"type": "BinaryReadSettings"
						}
					},
					"sink": {
						"type": "BinarySink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings",
							"copyBehavior": "PreserveHierarchy"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "Binary1",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Binary2",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Data flowweblogs",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Copy dataVM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "dataflowweblogs",
						"type": "DataFlowReference"
					},
					"staging": {
						"linkedService": {
							"referenceName": "AzureDataLakeStorage2",
							"type": "LinkedServiceReference"
						},
						"folderPath": "synfs/synapse"
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2024-12-20T19:08:13Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}